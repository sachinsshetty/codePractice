Given a permutation of 1 to n, you need to perform some operations to make it into increasing order. Each operation is to reverse an interval

 (a prefix). Your goal is to minimize the number of operations.

Input

The first line contains an integer
(

).

The second line contains
 space separated integers, representing the sequence

.

Output

An integer representing the answer, that is, the minimum number of operations needed to make the permutation into increasing order.
SAMPLE INPUT

3
3 1 2

SAMPLE OUTPUT

2

Explanation

A possible way is to reverse 
, and then 

.
Time Limit: 2.0 sec(s) for each input file.
Memory Limit: 256 MB
Source Limit: 1024 KB
Marking Scheme: Marks are awarded when all the testcases pass.
Allowed Languages: C, C++, C++14, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java, Java 8, JavaScript(Rhino), JavaScript(Node.js), Julia, Kotlin, Lisp, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, R(RScript), Racket, Ruby, Rust, Scala, Swift, Swift-4.1, Visual Basic



---code

/* IMPORTANT: Multiple classes and nested static classes are supported */

import java.util.*;

// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail

class TestClass {
    public static void main(String args[] ) throws Exception {
    Scanner scn = new Scanner(System.in);
		
		int n = scn.nextInt();
		
		int arr[] = new int[n];
		for(int i =0;i<n;i++)
		    arr[i] = scn.nextInt();
		    
		    
		// bubble sort ;
		
		int count=0;
		
		for(int i=0; i< n-1;i++)
		{
		    for (int j=i+1;j<n ;j++)
		        if(arr[j] < arr[i])
		            {
		                int tmp = arr[i];
		                arr[i] = arr[j];
		                arr[j] = tmp;
		            count ++;    
		            }
		}
		
		System.out.println(count);
	}
    
}


