Navi is a famous shopkeeper in his locality. He gives discounts to his regular customers. Some new rules have been made due to which he is in trouble. According to the new rules, any shopkeeper can sale his items to only one customer in a day. But every customer has some issues like the total money they have or the total weight they can handle at a time or number of items they are interested in. Navi’s friend has decided to help Navi and he promised him that he will purchase items from his shop daily and try to maximize his sale in terms of total price with satisfying the count of items and weight of the items . He will give his requirements as Wmax (maximum weight he can carry) and C (maximum count of the items he can carry). Now Navi is interested in knowing the total price of the items he can sell.
Input

First line of input will contain D (total number of days). Then for each day first line will contain N (Number of items) . Next each N lines will contains two integers P (price of ith item on that day) and W(weight of ith item on that day) separated by a space. Last line for the input of the particular day will contain Wmax and C separated by a space.
Output
For each day output “For Day #day_number:” then in next line print the maximum total price. If his friend is not able to purchase any of the item then print -1.
Constraints
1 < = D < = 10

1 < = N < = 16

1 < = C < = 20

1 < = Pi , Wi , Wmax < = 109
SAMPLE INPUT

1
3
10 20
20 30
30 40
50 2

SAMPLE OUTPUT

For Day #1:
30

Explanation

He will buy first and second item.
Time Limit: 1.0 sec(s) for each input file.
Memory Limit: 256 MB
Source Limit: 1024 KB
Marking Scheme: Marks are awarded when all the testcases pass.
Allowed Languages: C, C++, C++14, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java, Java 8, JavaScript(Rhino), JavaScript(Node.js), Julia, Kotlin, Lisp, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, R(RScript), Racket, Ruby, Rust, Scala, Swift, Swift-4.1, Visual Basic



-----code

/* IMPORTANT: Multiple classes and nested static classes are supported */

/*
 * uncomment this if you want to read input.
//imports for BufferedReader
import java.io.BufferedReader;
import java.io.InputStreamReader;

//import for Scanner and other utility classes
import java.util.*;
*/
import java.util.*;
// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail

class TestClass {
    public static void main(String args[] ) throws Exception {
    
        Scanner s = new Scanner(System.in);
        int days = s.nextInt();
        
        int maxPrice=0;
        int noItems;
        
        
        int maxWe , maxCount;
        
           ArrayList<Integer> maxPrices = new ArrayList<Integer>(days);
            ArrayList<Integer> maxCounts =new  ArrayList<Integer>(days);
         
        
        ArrayList<ArrayList<Integer>> itemPrice = new ArrayList<ArrayList<Integer>>(days);
        ArrayList<ArrayList<Integer>> itemWeight = new ArrayList<ArrayList<Integer>>(days);
        for(int i=0;i<days;i++)
        {
            noItems = s.nextInt();
            
            
            ArrayList<Integer> titemPrice = new ArrayList<Integer>(noItems);
            ArrayList<Integer> titemWeight =new  ArrayList<Integer>(noItems);
            
            for(int j=0;j< noItems;j++)
            {
                titemPrice.add(s.nextInt());
                titemWeight.add(s.nextInt());
                
            }
            
            maxPrices.add(s.nextInt());
            maxCounts.add(s.nextInt());
        //    itemPrice.add(titemPrice);
        //    itemWeight.add(titemWeight);
        }
        
    //    maxWe = s.nextInt();
     //   maxCount = s.nextInt();
        int tempSum =0, tempCount=0;
        for(int i=0;i<days;i++)
        {
            
            ArrayList<Integer> titemPrice = itemPrice.get(i);
            ArrayList<Integer> titemWeight = itemWeight.get(i);
            
            for(int j=0;j< titemPrice.size(); j++)
            {
                //if( (tempSum +titemPrice.get(j))  < maxWe && tempCount + (titemWeight.get(j)) < maxCount)
                if( (tempSum +titemWeight.get(j))  < maxPrices.get(i) && tempCount < maxCounts.get(i))
                {
                    maxPrice = maxPrices.get(i) + titemPrice.get(j);
                    //tempSum = tempSum +  titemPrice.get(j); 
                    tempCount ++;
                }        
            }
        
        
        
            System.out.println("For Day #" +  (i+1)+":");
           System.out.println(maxPrice);
        
        }
        
    //    System.out.println("For Day #1:");
     //   System.out.println(30);
    }
}
