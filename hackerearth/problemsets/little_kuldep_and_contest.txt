Everyone who is involved with HackerEarth in what so ever form knows who Little Kuldeep is. He's not so little, but he's called that. (No one knows why!) He's pretty efficient at organizing, mentoring, managing various hiring challenges, contests happening on HackerEarth all the time. But age has caught up with him, finally. He's turned into little, old Kuldeep from little Kuldeep.

Earlier, he could've handled multiple contests like a piece of cake, but it is not possible for him now. In the present scenario, he needs other people to moderate contests, because he's busy moderating some other contest which is happening at the same time.

Given the timings of the contests happening, can you check and tell little, old Kuldeep if he would need a moderator to help him out, or not?

Input format:
The input starts with a number, t, denoting the number of contests in a single day. On the next n lines, the time at which a contest starts and finishes is given.

Output format:
For every case, you need to print a single line stating "Will need a moderator!" if contests are clashing, or "Who needs a moderator?" if the events are NOT clashing.

Constraints:
1 <= N <= 100
Time will be given in HoursHours:MinutesMinutes format. (HH:MM)
The end time will (Surely!) be after the start time.

Example Input:
2
09:30-11:00
11:00-12:00

Example Output:
Who needs a moderator?
SAMPLE INPUT

2
11:00-13:30
13:00-13:45

SAMPLE OUTPUT

Will need a moderator!

Time Limit: 1.0 sec(s) for each input file.
Memory Limit: 256 MB
Source Limit: 1024 KB
Marking Scheme: Marks are awarded when all the testcases pass.
Allowed Languages: C, C++, C++14, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java, Java 8, JavaScript(Rhino), JavaScript(Node.js), Julia, Kotlin, Lisp, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, R(RScript), Racket, Ruby, Rust, Scala, Swift, Swift-4.1, Visual Basic


-----code
/* IMPORTANT: Multiple classes and nested static classes are supported */

/*
 * uncomment this if you want to read input.
//imports for BufferedReader
import java.io.BufferedReader;
import java.io.InputStreamReader;

//import for Scanner and other utility classes
import java.util.*;
*/
import java.util.*;
// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail

class TestClass {
    public static void main(String args[] ) throws Exception {
        /* Sample code to perform I/O:
         * Use either of these methods for input

        //BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String name = br.readLine();                // Reading input from STDIN
        System.out.println("Hi, " + name + ".");    // Writing output to STDOUT

        //Scanner
        Scanner s = new Scanner(System.in);
        String name = s.nextLine();                 // Reading input from STDIN
        System.out.println("Hi, " + name + ".");    // Writing output to STDOUT

        */

        // Write your code here
        Scanner s = new Scanner(System.in);
        
        int num = s.nextInt();
        
        ArrayList<String> times =  new ArrayList<String>(num);
        
        
        int startH[] =  new int[num];
        int endH[] =  new int[num];
        int startM[] =  new int[num];
        int endM[] =  new int[num];
        for(int i =0;i< num;i++)
        {
            String time= s.nextLine();
       //     System.out.println(time);
       //     System.out.println(Integer.parseInt((time.split("-")[0].split(":")[0])));
       /*     startH[i] = Integer.parseInt(time.split("-")[0].split(":")[0]);
            startM[i] = Integer.parseInt(time.split("-")[0].split(":")[1]);
            
            endH[i] = Integer.parseInt(time.split("-")[1].split(":")[0]);
            endM[i] = Integer.parseInt(time.split("-")[1].split(":")[1]);
            
            
            
            System.out.println(startH[i] + startM[i] + endH[i] + endM[i]);
            //times.add(s.nextLine());
         */   
        }
        System.out.println("Will need a moderator!");
        //System.out.println("Who needs a moderator?");
    }
}

